{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\n\n/**\n * Custom hook for using localStorage with React state\n * @param {string} key - The localStorage key\n * @param {*} initialValue - The initial value\n * @returns {[*, Function]} - State and setter function\n */\nexport function useLocalStorage(key, initialValue) {\n  _s();\n  // Get from local storage then parse stored json or return initialValue\n  const readValue = () => {\n    if (typeof window === 'undefined') {\n      return initialValue;\n    }\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.warn(`Error reading localStorage key \"${key}\":`, error);\n      return initialValue;\n    }\n  };\n\n  // State to store our value\n  const [storedValue, setStoredValue] = useState(readValue);\n\n  // Return a wrapped version of useState's setter function that persists the new value to localStorage\n  const setValue = value => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n\n      // Save state\n      setStoredValue(valueToStore);\n\n      // Save to local storage\n      if (typeof window !== 'undefined') {\n        window.localStorage.setItem(key, JSON.stringify(valueToStore));\n      }\n    } catch (error) {\n      console.warn(`Error setting localStorage key \"${key}\":`, error);\n    }\n  };\n  useEffect(() => {\n    setStoredValue(readValue());\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return [storedValue, setValue];\n}\n_s(useLocalStorage, \"Ks0YTqr1zEI6XzxfG55cySFLWkY=\");","map":{"version":3,"names":["useState","useEffect","useLocalStorage","key","initialValue","_s","readValue","window","item","localStorage","getItem","JSON","parse","error","console","warn","storedValue","setStoredValue","setValue","value","valueToStore","Function","setItem","stringify"],"sources":["/home/msweelam/Work/projects/project-based-training/wikidocify/ui/src/hooks/useLocalStorage.js"],"sourcesContent":["import { useState, useEffect } from 'react';\n\n/**\n * Custom hook for using localStorage with React state\n * @param {string} key - The localStorage key\n * @param {*} initialValue - The initial value\n * @returns {[*, Function]} - State and setter function\n */\nexport function useLocalStorage(key, initialValue) {\n  // Get from local storage then parse stored json or return initialValue\n  const readValue = () => {\n    if (typeof window === 'undefined') {\n      return initialValue;\n    }\n\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.warn(`Error reading localStorage key \"${key}\":`, error);\n      return initialValue;\n    }\n  };\n\n  // State to store our value\n  const [storedValue, setStoredValue] = useState(readValue);\n\n  // Return a wrapped version of useState's setter function that persists the new value to localStorage\n  const setValue = (value) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      \n      // Save state\n      setStoredValue(valueToStore);\n      \n      // Save to local storage\n      if (typeof window !== 'undefined') {\n        window.localStorage.setItem(key, JSON.stringify(valueToStore));\n      }\n    } catch (error) {\n      console.warn(`Error setting localStorage key \"${key}\":`, error);\n    }\n  };\n\n  useEffect(() => {\n    setStoredValue(readValue());\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return [storedValue, setValue];\n}"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,eAAeA,CAACC,GAAG,EAAEC,YAAY,EAAE;EAAAC,EAAA;EACjD;EACA,MAAMC,SAAS,GAAGA,CAAA,KAAM;IACtB,IAAI,OAAOC,MAAM,KAAK,WAAW,EAAE;MACjC,OAAOH,YAAY;IACrB;IAEA,IAAI;MACF,MAAMI,IAAI,GAAGD,MAAM,CAACE,YAAY,CAACC,OAAO,CAACP,GAAG,CAAC;MAC7C,OAAOK,IAAI,GAAGG,IAAI,CAACC,KAAK,CAACJ,IAAI,CAAC,GAAGJ,YAAY;IAC/C,CAAC,CAAC,OAAOS,KAAK,EAAE;MACdC,OAAO,CAACC,IAAI,CAAC,mCAAmCZ,GAAG,IAAI,EAAEU,KAAK,CAAC;MAC/D,OAAOT,YAAY;IACrB;EACF,CAAC;;EAED;EACA,MAAM,CAACY,WAAW,EAAEC,cAAc,CAAC,GAAGjB,QAAQ,CAACM,SAAS,CAAC;;EAEzD;EACA,MAAMY,QAAQ,GAAIC,KAAK,IAAK;IAC1B,IAAI;MACF;MACA,MAAMC,YAAY,GAAGD,KAAK,YAAYE,QAAQ,GAAGF,KAAK,CAACH,WAAW,CAAC,GAAGG,KAAK;;MAE3E;MACAF,cAAc,CAACG,YAAY,CAAC;;MAE5B;MACA,IAAI,OAAOb,MAAM,KAAK,WAAW,EAAE;QACjCA,MAAM,CAACE,YAAY,CAACa,OAAO,CAACnB,GAAG,EAAEQ,IAAI,CAACY,SAAS,CAACH,YAAY,CAAC,CAAC;MAChE;IACF,CAAC,CAAC,OAAOP,KAAK,EAAE;MACdC,OAAO,CAACC,IAAI,CAAC,mCAAmCZ,GAAG,IAAI,EAAEU,KAAK,CAAC;IACjE;EACF,CAAC;EAEDZ,SAAS,CAAC,MAAM;IACdgB,cAAc,CAACX,SAAS,CAAC,CAAC,CAAC;IAC3B;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO,CAACU,WAAW,EAAEE,QAAQ,CAAC;AAChC;AAACb,EAAA,CA3CeH,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}