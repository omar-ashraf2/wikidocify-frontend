{"ast":null,"code":"/**\n * Utility functions for working with markdown\n */\n\n/**\n * Extract the title from markdown content\n * @param {string} markdown - The markdown content\n * @returns {string} - The extracted title or a default title\n */\nexport const extractTitle = markdown => {\n  if (!markdown) return 'Untitled Document';\n\n  // Look for the first h1 heading\n  const h1Match = markdown.match(/^# (.+)$/m);\n  if (h1Match && h1Match[1]) {\n    return h1Match[1].trim();\n  }\n\n  // If no h1, look for the first line with content\n  const lines = markdown.split('\\n').filter(line => line.trim() !== '');\n  if (lines.length > 0) {\n    return lines[0].replace(/^#+\\s+/, '').trim() || 'Untitled Document';\n  }\n  return 'Untitled Document';\n};\n\n/**\n * Calculate the reading time of markdown content\n * @param {string} markdown - The markdown content\n * @returns {number} - Estimated reading time in minutes\n */\nexport const calculateReadingTime = markdown => {\n  if (!markdown) return 0;\n\n  // Strip markdown syntax\n  const text = markdown.replace(/#+\\s+/g, '') // Headers\n  .replace(/\\*\\*|\\*/g, '') // Bold and italic\n  .replace(/!\\[.*?\\]\\(.*?\\)/g, '') // Images\n  .replace(/\\[.*?\\]\\(.*?\\)/g, '') // Links\n  .replace(/```[\\s\\S]*?```/g, '') // Code blocks\n  .replace(/`.*?`/g, '') // Inline code\n  .replace(/\\n/g, ' ') // Newlines\n  .replace(/\\s+/g, ' ') // Extra spaces\n  .trim();\n\n  // Average reading speed: 200 words per minute\n  const wordCount = text.split(/\\s+/).length;\n  return Math.max(1, Math.ceil(wordCount / 200));\n};\n\n/**\n * Get word count from markdown\n * @param {string} markdown - The markdown content\n * @returns {number} - Word count\n */\nexport const getWordCount = markdown => {\n  if (!markdown) return 0;\n\n  // Strip markdown syntax (similar to calculateReadingTime)\n  const text = markdown.replace(/#+\\s+/g, '').replace(/\\*\\*|\\*/g, '').replace(/!\\[.*?\\]\\(.*?\\)/g, '').replace(/\\[.*?\\]\\(.*?\\)/g, '').replace(/```[\\s\\S]*?```/g, '').replace(/`.*?`/g, '').replace(/\\n/g, ' ').replace(/\\s+/g, ' ').trim();\n  return text.split(/\\s+/).length;\n};","map":{"version":3,"names":["extractTitle","markdown","h1Match","match","trim","lines","split","filter","line","length","replace","calculateReadingTime","text","wordCount","Math","max","ceil","getWordCount"],"sources":["/home/msweelam/Work/projects/project-based-training/wikidocify/ui/src/utils/markdown.js"],"sourcesContent":["/**\n * Utility functions for working with markdown\n */\n\n/**\n * Extract the title from markdown content\n * @param {string} markdown - The markdown content\n * @returns {string} - The extracted title or a default title\n */\nexport const extractTitle = (markdown) => {\n    if (!markdown) return 'Untitled Document';\n    \n    // Look for the first h1 heading\n    const h1Match = markdown.match(/^# (.+)$/m);\n    if (h1Match && h1Match[1]) {\n      return h1Match[1].trim();\n    }\n    \n    // If no h1, look for the first line with content\n    const lines = markdown.split('\\n').filter(line => line.trim() !== '');\n    if (lines.length > 0) {\n      return lines[0].replace(/^#+\\s+/, '').trim() || 'Untitled Document';\n    }\n    \n    return 'Untitled Document';\n  };\n  \n  /**\n   * Calculate the reading time of markdown content\n   * @param {string} markdown - The markdown content\n   * @returns {number} - Estimated reading time in minutes\n   */\n  export const calculateReadingTime = (markdown) => {\n    if (!markdown) return 0;\n    \n    // Strip markdown syntax\n    const text = markdown\n      .replace(/#+\\s+/g, '')         // Headers\n      .replace(/\\*\\*|\\*/g, '')       // Bold and italic\n      .replace(/!\\[.*?\\]\\(.*?\\)/g, '') // Images\n      .replace(/\\[.*?\\]\\(.*?\\)/g, '') // Links\n      .replace(/```[\\s\\S]*?```/g, '') // Code blocks\n      .replace(/`.*?`/g, '')         // Inline code\n      .replace(/\\n/g, ' ')           // Newlines\n      .replace(/\\s+/g, ' ')          // Extra spaces\n      .trim();\n    \n    // Average reading speed: 200 words per minute\n    const wordCount = text.split(/\\s+/).length;\n    return Math.max(1, Math.ceil(wordCount / 200));\n  };\n  \n  /**\n   * Get word count from markdown\n   * @param {string} markdown - The markdown content\n   * @returns {number} - Word count\n   */\n  export const getWordCount = (markdown) => {\n    if (!markdown) return 0;\n    \n    // Strip markdown syntax (similar to calculateReadingTime)\n    const text = markdown\n      .replace(/#+\\s+/g, '')\n      .replace(/\\*\\*|\\*/g, '')\n      .replace(/!\\[.*?\\]\\(.*?\\)/g, '')\n      .replace(/\\[.*?\\]\\(.*?\\)/g, '')\n      .replace(/```[\\s\\S]*?```/g, '')\n      .replace(/`.*?`/g, '')\n      .replace(/\\n/g, ' ')\n      .replace(/\\s+/g, ' ')\n      .trim();\n    \n    return text.split(/\\s+/).length;\n  };"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,YAAY,GAAIC,QAAQ,IAAK;EACtC,IAAI,CAACA,QAAQ,EAAE,OAAO,mBAAmB;;EAEzC;EACA,MAAMC,OAAO,GAAGD,QAAQ,CAACE,KAAK,CAAC,WAAW,CAAC;EAC3C,IAAID,OAAO,IAAIA,OAAO,CAAC,CAAC,CAAC,EAAE;IACzB,OAAOA,OAAO,CAAC,CAAC,CAAC,CAACE,IAAI,CAAC,CAAC;EAC1B;;EAEA;EACA,MAAMC,KAAK,GAAGJ,QAAQ,CAACK,KAAK,CAAC,IAAI,CAAC,CAACC,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACJ,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC;EACrE,IAAIC,KAAK,CAACI,MAAM,GAAG,CAAC,EAAE;IACpB,OAAOJ,KAAK,CAAC,CAAC,CAAC,CAACK,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAACN,IAAI,CAAC,CAAC,IAAI,mBAAmB;EACrE;EAEA,OAAO,mBAAmB;AAC5B,CAAC;;AAED;AACF;AACA;AACA;AACA;AACE,OAAO,MAAMO,oBAAoB,GAAIV,QAAQ,IAAK;EAChD,IAAI,CAACA,QAAQ,EAAE,OAAO,CAAC;;EAEvB;EACA,MAAMW,IAAI,GAAGX,QAAQ,CAClBS,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAS;EAAA,CAC9BA,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAAO;EAAA,CAC9BA,OAAO,CAAC,kBAAkB,EAAE,EAAE,CAAC,CAAC;EAAA,CAChCA,OAAO,CAAC,iBAAiB,EAAE,EAAE,CAAC,CAAC;EAAA,CAC/BA,OAAO,CAAC,iBAAiB,EAAE,EAAE,CAAC,CAAC;EAAA,CAC/BA,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAS;EAAA,CAC9BA,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAW;EAAA,CAC9BA,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAU;EAAA,CAC9BN,IAAI,CAAC,CAAC;;EAET;EACA,MAAMS,SAAS,GAAGD,IAAI,CAACN,KAAK,CAAC,KAAK,CAAC,CAACG,MAAM;EAC1C,OAAOK,IAAI,CAACC,GAAG,CAAC,CAAC,EAAED,IAAI,CAACE,IAAI,CAACH,SAAS,GAAG,GAAG,CAAC,CAAC;AAChD,CAAC;;AAED;AACF;AACA;AACA;AACA;AACE,OAAO,MAAMI,YAAY,GAAIhB,QAAQ,IAAK;EACxC,IAAI,CAACA,QAAQ,EAAE,OAAO,CAAC;;EAEvB;EACA,MAAMW,IAAI,GAAGX,QAAQ,CAClBS,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CACrBA,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CACvBA,OAAO,CAAC,kBAAkB,EAAE,EAAE,CAAC,CAC/BA,OAAO,CAAC,iBAAiB,EAAE,EAAE,CAAC,CAC9BA,OAAO,CAAC,iBAAiB,EAAE,EAAE,CAAC,CAC9BA,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CACrBA,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CACnBA,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CACpBN,IAAI,CAAC,CAAC;EAET,OAAOQ,IAAI,CAACN,KAAK,CAAC,KAAK,CAAC,CAACG,MAAM;AACjC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}